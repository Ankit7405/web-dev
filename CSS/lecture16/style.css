*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    height: 100vh;
    width: 100vw;
}

.container{
    height: 100%;
    width: 100%;
    padding: 40px;

    background-color: rgb(44, 38, 38);

    /* Similar to flex here also we need to tell display as grid */
    /* Basically gird is used to create layout with help of flex also to create production ready websites */
    display: grid;

    /* Defines spaces between grid elemets */
    row-gap: 20px;
    column-gap: 20px;

    /* This property defines that how many rows we want and how the partition needs to be done */
    /* Like here 2 times 1fr refers that there are 2 row and width of those cells would be 1fr(fractional unit) */
    /* Fractiona unit is also a type of unit here what happens is like while container width is 3000px then if we defines 2fr then 1 fr becomes 1500px in this way webisite becomes response and we don't need to hit and try hiegth and width */
    /* grid-template-rows: 1fr 1fr; */
    /* grid-template-columns: 1fr 1fr 1fr; */

    /* Short hand notation */
    /* grid-template-columns: repeat(3,1fr);
    grid-template-rows: repeat(4, 1fr); */

    grid-template-columns: repeat(1, 1fr);
    grid-template-rows: repeat(6, 1fr);
}

.item{
    background-color: beige;
    border: 2px solid black;

    display: flex;
    justify-content: center;
    align-items: center;

    font-size: 2rem;
}


/* To make page responsive we used media query */
@media (min-width:760px){

    .container{
        grid-template-columns: repeat(3,1fr);
        grid-template-rows: repeat(4, 1fr);
    }

    .header, .footer{
        grid-column-start: 1;
        grid-column-end: 4;
    }
    
    .sidebar{
        grid-row-start: 2;
        grid-row-end: 4;
    }
    
    .content{
        grid-column-start: 2;
        grid-column-end: 4;
    }
}

